%%
%% Autogenerated by Thrift Compiler (0.10.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(t_c_l_i_service_thrift).
-behaviour(thrift_service).


-include("t_c_l_i_service_thrift.hrl").

-export([struct_info/1, function_info/2, function_names/0]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% OpenSession(This, Req)
function_info('OpenSession', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TOpenSessionReq'}}}]}
;
function_info('OpenSession', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TOpenSessionResp'}};
function_info('OpenSession', exceptions) ->
  {struct, []}
;
% CloseSession(This, Req)
function_info('CloseSession', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TCloseSessionReq'}}}]}
;
function_info('CloseSession', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TCloseSessionResp'}};
function_info('CloseSession', exceptions) ->
  {struct, []}
;
% GetInfo(This, Req)
function_info('GetInfo', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetInfoReq'}}}]}
;
function_info('GetInfo', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetInfoResp'}};
function_info('GetInfo', exceptions) ->
  {struct, []}
;
% ExecuteStatement(This, Req)
function_info('ExecuteStatement', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TExecuteStatementReq'}}}]}
;
function_info('ExecuteStatement', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TExecuteStatementResp'}};
function_info('ExecuteStatement', exceptions) ->
  {struct, []}
;
% GetTypeInfo(This, Req)
function_info('GetTypeInfo', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetTypeInfoReq'}}}]}
;
function_info('GetTypeInfo', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetTypeInfoResp'}};
function_info('GetTypeInfo', exceptions) ->
  {struct, []}
;
% GetCatalogs(This, Req)
function_info('GetCatalogs', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetCatalogsReq'}}}]}
;
function_info('GetCatalogs', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetCatalogsResp'}};
function_info('GetCatalogs', exceptions) ->
  {struct, []}
;
% GetSchemas(This, Req)
function_info('GetSchemas', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetSchemasReq'}}}]}
;
function_info('GetSchemas', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetSchemasResp'}};
function_info('GetSchemas', exceptions) ->
  {struct, []}
;
% GetTables(This, Req)
function_info('GetTables', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetTablesReq'}}}]}
;
function_info('GetTables', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetTablesResp'}};
function_info('GetTables', exceptions) ->
  {struct, []}
;
% GetTableTypes(This, Req)
function_info('GetTableTypes', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetTableTypesReq'}}}]}
;
function_info('GetTableTypes', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetTableTypesResp'}};
function_info('GetTableTypes', exceptions) ->
  {struct, []}
;
% GetColumns(This, Req)
function_info('GetColumns', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetColumnsReq'}}}]}
;
function_info('GetColumns', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetColumnsResp'}};
function_info('GetColumns', exceptions) ->
  {struct, []}
;
% GetFunctions(This, Req)
function_info('GetFunctions', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetFunctionsReq'}}}]}
;
function_info('GetFunctions', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetFunctionsResp'}};
function_info('GetFunctions', exceptions) ->
  {struct, []}
;
% GetOperationStatus(This, Req)
function_info('GetOperationStatus', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetOperationStatusReq'}}}]}
;
function_info('GetOperationStatus', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetOperationStatusResp'}};
function_info('GetOperationStatus', exceptions) ->
  {struct, []}
;
% CancelOperation(This, Req)
function_info('CancelOperation', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TCancelOperationReq'}}}]}
;
function_info('CancelOperation', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TCancelOperationResp'}};
function_info('CancelOperation', exceptions) ->
  {struct, []}
;
% CloseOperation(This, Req)
function_info('CloseOperation', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TCloseOperationReq'}}}]}
;
function_info('CloseOperation', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TCloseOperationResp'}};
function_info('CloseOperation', exceptions) ->
  {struct, []}
;
% GetResultSetMetadata(This, Req)
function_info('GetResultSetMetadata', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetResultSetMetadataReq'}}}]}
;
function_info('GetResultSetMetadata', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetResultSetMetadataResp'}};
function_info('GetResultSetMetadata', exceptions) ->
  {struct, []}
;
% FetchResults(This, Req)
function_info('FetchResults', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TFetchResultsReq'}}}]}
;
function_info('FetchResults', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TFetchResultsResp'}};
function_info('FetchResults', exceptions) ->
  {struct, []}
;
% GetDelegationToken(This, Req)
function_info('GetDelegationToken', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TGetDelegationTokenReq'}}}]}
;
function_info('GetDelegationToken', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TGetDelegationTokenResp'}};
function_info('GetDelegationToken', exceptions) ->
  {struct, []}
;
% CancelDelegationToken(This, Req)
function_info('CancelDelegationToken', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TCancelDelegationTokenReq'}}}]}
;
function_info('CancelDelegationToken', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TCancelDelegationTokenResp'}};
function_info('CancelDelegationToken', exceptions) ->
  {struct, []}
;
% RenewDelegationToken(This, Req)
function_info('RenewDelegationToken', params_type) ->
  {struct, [{1, {struct, {'t_c_l_i_service_types', 'TRenewDelegationTokenReq'}}}]}
;
function_info('RenewDelegationToken', reply_type) ->
  {struct, {'t_c_l_i_service_types', 'TRenewDelegationTokenResp'}};
function_info('RenewDelegationToken', exceptions) ->
  {struct, []}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

function_names() -> 
  ['OpenSession', 'CloseSession', 'GetInfo', 'ExecuteStatement', 'GetTypeInfo', 'GetCatalogs', 'GetSchemas', 'GetTables', 'GetTableTypes', 'GetColumns', 'GetFunctions', 'GetOperationStatus', 'CancelOperation', 'CloseOperation', 'GetResultSetMetadata', 'FetchResults', 'GetDelegationToken', 'CancelDelegationToken', 'RenewDelegationToken'].

