(function() {
    var Promise = require("bluebird");
    var gen1_promisify = function(fn) {
        return new Promise(function(onFulfilled, onRejected) {
            fn(function(error, result) {
                if (error) {
                    onRejected(error);
                } else {
                    onFulfilled(result);
                }
            });
        });
    };
    var gen2_listComprehension = function(items, areRanges, block) {
        return new Promise(function(onFulfilled, onRejected) {
            var indexes = [];
            var results = {};
            var completed = 0;
            var wasError = false;
            if (items.length > 0) {
                for (var n = 0; n < items.length; n++) {
                    Promise.resolve(block(n, items[n], function(result, index) {
                        indexes.push(index);
                        results[index] = result;
                    })).then(function(result) {
                        completed++;
                        if (completed == items.length && !wasError) {
                            var sortedResults = [];
                            indexes.sort();
                            for (n = 0; n < indexes.length; n++) {
                                if (areRanges) {
                                    sortedResults.push.apply(sortedResults, results[indexes[n]]);
                                } else {
                                    sortedResults.push(results[indexes[n]]);
                                }
                            }
                            onFulfilled(sortedResults);
                        }
                    }, onRejected);
                }
            } else {
                onFulfilled([]);
            }
        });
    };
    var self = this;
    var fs, mkdirp, rimraf, path, write, destroyable, flatten, mergeInto;
    fs = require("fs");
    mkdirp = require("mkdirp");
    rimraf = require("rimraf");
    path = require("path");
    module.exports = function() {
        var self = this;
        var args = Array.prototype.slice.call(arguments, 0, arguments.length);
        var root, tree, entries, gen3_asyncResult;
        return new Promise(function(gen4_onFulfilled) {
            if (args.length === 1) {
                root = ".";
                tree = args[0];
            } else {
                root = args[0];
                tree = args[1];
            }
            entries = flatten(tree, root + "/");
            gen4_onFulfilled(Promise.resolve(write(entries)));
        });
    };
    write = function(entries, done) {
        var writeFile, gen5_asyncResult, gen6_asyncResult;
        return new Promise(function(gen4_onFulfilled) {
            writeFile = function(filePath, written) {
                var gen7_asyncResult, entry, gen8_asyncResult;
                return new Promise(function(gen4_onFulfilled) {
                    gen4_onFulfilled(gen1_promisify(function(gen9_callback) {
                        return mkdirp(path.dirname(filePath), gen9_callback);
                    }).then(function(gen7_asyncResult) {
                        gen7_asyncResult;
                        entry = entries.files[filePath];
                        return Promise.resolve(function() {
                            if (entry && entry.pipe instanceof Function) {
                                return new Promise(function(gen4_onFulfilled) {
                                    gen4_onFulfilled(new Promise(function(result, error) {
                                        entry.pipe(fs.createWriteStream(filePath));
                                        entry.on("end", result);
                                        return entry.on("error", error);
                                    }));
                                });
                            } else {
                                return new Promise(function(gen4_onFulfilled) {
                                    gen4_onFulfilled(gen1_promisify(function(gen9_callback) {
                                        return fs.writeFile(filePath, entry, gen9_callback);
                                    }));
                                });
                            }
                        }());
                    }));
                });
            };
            gen4_onFulfilled(Promise.resolve(gen2_listComprehension(entries.dirs, false, function(gen10_index, dir, gen11_result) {
                var gen12_asyncResult;
                return new Promise(function(gen4_onFulfilled) {
                    gen4_onFulfilled(gen1_promisify(function(gen9_callback) {
                        return mkdirp(dir, gen9_callback);
                    }).then(function(gen12_asyncResult) {
                        return gen11_result(gen12_asyncResult, gen10_index);
                    }));
                });
            })).then(function(gen5_asyncResult) {
                gen5_asyncResult;
                return Promise.resolve(gen2_listComprehension(Object.keys(entries.files), false, function(gen13_index, file, gen14_result) {
                    var gen15_asyncResult;
                    return new Promise(function(gen4_onFulfilled) {
                        gen4_onFulfilled(Promise.resolve(writeFile(file)).then(function(gen15_asyncResult) {
                            return gen14_result(gen15_asyncResult, gen13_index);
                        }));
                    });
                })).then(function(gen6_asyncResult) {
                    gen6_asyncResult;
                    return destroyable(entries);
                });
            }));
        });
    };
    destroyable = function(entries) {
        return {
            destroy: function(done) {
                var self = this;
                var gen16_asyncResult, gen17_asyncResult;
                return new Promise(function(gen4_onFulfilled) {
                    gen4_onFulfilled(Promise.resolve(gen2_listComprehension(Object.keys(entries.files), false, function(gen18_index, file, gen19_result) {
                        var gen20_asyncResult;
                        return new Promise(function(gen4_onFulfilled) {
                            gen4_onFulfilled(gen1_promisify(function(gen9_callback) {
                                return fs.unlink(file, gen9_callback);
                            }).then(function(gen20_asyncResult) {
                                return gen19_result(gen20_asyncResult, gen18_index);
                            }));
                        });
                    })).then(function(gen16_asyncResult) {
                        gen16_asyncResult;
                        return Promise.resolve(gen2_listComprehension(entries.dirs, false, function(gen21_index, dir, gen22_result) {
                            var gen23_asyncResult;
                            return new Promise(function(gen4_onFulfilled) {
                                gen4_onFulfilled(gen1_promisify(function(gen9_callback) {
                                    return rimraf(dir, gen9_callback);
                                }).then(function(gen23_asyncResult) {
                                    return gen22_result(gen23_asyncResult, gen21_index);
                                }));
                            });
                        }));
                    }));
                });
            }
        };
    };
    flatten = function(obj, prefix) {
        var dirs, files, gen24_items, gen25_i, key, objectPath, children;
        dirs = [];
        files = {};
        gen24_items = Object.keys(obj);
        for (gen25_i = 0; gen25_i < gen24_items.length; ++gen25_i) {
            key = gen24_items[gen25_i];
            objectPath = prefix + key;
            if (obj[key].constructor === {}.constructor) {
                dirs.push(objectPath);
                children = flatten(obj[key], objectPath + "/");
                dirs = dirs.concat(children.dirs);
                mergeInto(children.files, files);
            } else {
                files[objectPath] = obj[key];
            }
        }
        return {
            dirs: dirs,
            files: files
        };
    };
    mergeInto = function(obj, other) {
        var key;
        for (key in obj) {
            (function(key) {
                other[key] = obj[key];
            })(key);
        }
        return void 0;
    };
}).call(this);