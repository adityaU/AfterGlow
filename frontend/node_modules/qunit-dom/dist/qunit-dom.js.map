{"version":3,"file":"qunit-dom.js","sources":["../lib/assertions/exists.js","../lib/helpers/element-to-string.js","../lib/assertions/focused.js","../lib/assertions/not-focused.js","../lib/assertions/is-checked.js","../lib/assertions/is-not-checked.js","../lib/assertions/is-required.js","../lib/assertions/is-not-required.js","../lib/helpers/visible.js","../lib/assertions/is-visible.js","../lib/assertions/is-not-visible.js","../lib/assertions/is-disabled.js","../lib/helpers/collapse-whitespace.js","../lib/assertions.js","../lib/qunit-dom.js"],"sourcesContent":["export default function exists(options, message) {\n  if (typeof this.target !== 'string') {\n    throw new TypeError(`Unexpected Parameter: ${this.target}`)\n  }\n\n  if (typeof options === 'string') {\n    message = options;\n    options = undefined;\n  }\n\n  let elements = this.rootElement.querySelectorAll(this.target);\n\n  let expectedCount = options ? options.count : null;\n\n  if (expectedCount === null) {\n    let result = elements.length > 0;\n    let expected = format(this.target);\n    let actual = result ? expected : format(this.target, 0);\n\n    if (!message) {\n      message = expected;\n    }\n\n    this.pushResult({ result, actual, expected, message });\n\n  } else if (typeof expectedCount === 'number') {\n    let result = elements.length === expectedCount;\n    let actual = format(this.target, elements.length);\n    let expected = format(this.target, expectedCount);\n\n    if (!message) {\n      message = expected;\n    }\n\n    this.pushResult({result, actual, expected, message});\n\n  } else {\n    throw new TypeError(`Unexpected Parameter: ${expectedCount}`)\n  }\n}\n\nfunction format(selector, num) {\n  if (num === undefined || num === null) {\n    return `Element ${selector} exists`;\n  } else if (num === 0) {\n    return `Element ${selector} does not exist`;\n  } else if (num === 1) {\n    return `Element ${selector} exists once`;\n  } else if (num === 2) {\n    return `Element ${selector} exists twice`;\n  } else {\n    return `Element ${selector} exists ${num} times`;\n  }\n}\n","// imported from https://github.com/nathanboktae/chai-dom\n\nexport default function elementToString(el) {\n  let desc;\n  if (el instanceof window.NodeList) {\n    if (el.length === 0) { return 'empty NodeList'; }\n    desc = Array.prototype.slice.call(el, 0, 5).map(elementToString).join(', ');\n    return el.length > 5 ? `${desc}... (+${el.length - 5} more)` : desc;\n  }\n  if (!(el instanceof window.HTMLElement)) {\n    return String(el);\n  }\n\n  desc = el.tagName.toLowerCase();\n  if (el.id) {\n    desc += `#${el.id}`;\n  }\n  if (el.className) {\n    desc += `.${String(el.className).replace(/\\s+/g, '.')}`;\n  }\n  Array.prototype.forEach.call(el.attributes, function(attr) {\n    if (attr.name !== 'class' && attr.name !== 'id') {\n      desc += `[${attr.name}${attr.value ? `=\"${attr.value}\"]` : ']'}`;\n    }\n  });\n  return desc;\n}\n","import elementToString from '../helpers/element-to-string';\n\nexport default function focused(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  let result = document.activeElement === element;\n  let actual = elementToString(document.activeElement);\n  let expected = elementToString(this.target);\n\n  if (!message) {\n    message = `Element ${expected} is focused`;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}\n","export default function notFocused(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  let result = document.activeElement !== element;\n\n  if (!message) {\n    message = `Element ${this.targetDescription} is not focused`;\n  }\n\n  this.pushResult({ result, message });\n}\n","import elementToString from '../helpers/element-to-string';\n\nexport default function checked(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  let result = element.checked === true;\n  let actual = element.checked === true ? 'checked' : 'not checked';\n  let expected = 'checked';\n\n  if (!message) {\n    message = `Element ${elementToString(this.target)} is checked`;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}\n","import elementToString from '../helpers/element-to-string';\n\nexport default function notChecked(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  let result = element.checked === false;\n  let actual = element.checked === true ? 'checked' : 'not checked';\n  let expected = 'not checked';\n\n  if (!message) {\n    message = `Element ${elementToString(this.target)} is not checked`;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}\n","import elementToString from '../helpers/element-to-string';\n\nexport default function required(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  if (!(\n    element instanceof HTMLInputElement ||\n    element instanceof HTMLTextAreaElement ||\n    element instanceof HTMLSelectElement\n  )) {\n    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);\n  }\n\n  let result = element.required === true;\n  let actual = result ? 'required' : 'not required';\n  let expected = 'required';\n\n  if (!message) {\n    message = `Element ${elementToString(this.target)} is required`;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}","import elementToString from '../helpers/element-to-string';\n\nexport default function notRequired(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  if (!(\n    element instanceof HTMLInputElement ||\n    element instanceof HTMLTextAreaElement ||\n    element instanceof HTMLSelectElement\n  )) {\n    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);\n  }\n\n  let result = element.required === false;\n  let actual = !result ? 'required' : 'not required';\n  let expected = 'not required';\n\n  if (!message) {\n    message = `Element ${elementToString(this.target)} is not required`;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}\n","// Visible logic based on jQuery's\n// https://github.com/jquery/jquery/blob/4a2bcc27f9c3ee24b3effac0fbe1285d1ee23cc5/src/css/hiddenVisibleSelectors.js#L11-L13\n\nexport default function visible(el) {\n  if (el === null) return false;\n  if (el.offsetWidth === 0 || el.offsetHeight === 0) return false;\n\n  let clientRects = el.getClientRects();\n  if (clientRects.length === 0) return false;\n  for (let i = 0; i < clientRects.length; i++) {\n    let rect = clientRects[i];\n    if (rect.width !== 0 && rect.height !== 0) return true;\n  }\n\n  return false;\n}\n","import visible from '../helpers/visible';\n\nexport default function isVisible(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  let result = visible(element);\n  let actual = result\n    ? `Element ${this.target} is visible`\n    : `Element ${this.target} is not visible`;\n  let expected = `Element ${this.target} is visible`;\n\n  if (!message) {\n    message = expected;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}\n","import visible from '../helpers/visible';\n\nexport default function isNotVisible(message) {\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  let result = !visible(element);\n  let actual = result\n    ? `Element ${this.target} is not visible`\n    : `Element ${this.target} is visible`;\n  let expected = `Element ${this.target} is not visible`;\n\n  if (!message) {\n    message = expected;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}","export default function isDisabled(message, options = {}) {\n  let { inverted } = options;\n\n  let element = this.findTargetElement();\n  if (!element) return;\n\n  if (!(\n      element instanceof HTMLInputElement ||\n      element instanceof HTMLTextAreaElement ||\n      element instanceof HTMLSelectElement ||\n      element instanceof HTMLButtonElement ||\n      element instanceof HTMLOptGroupElement ||\n      element instanceof HTMLOptionElement ||\n      element instanceof HTMLFieldSetElement\n    )) {\n    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);\n  }\n\n  let result = element.disabled === !inverted;\n\n  let actual = element.disabled === false\n    ? `Element ${this.targetDescription} is not disabled`\n    : `Element ${this.targetDescription} is disabled`;\n\n  let expected = inverted\n    ? `Element ${this.targetDescription} is not disabled`\n    : `Element ${this.targetDescription} is disabled`;\n\n  if (!message) {\n    message = expected;\n  }\n\n  this.pushResult({ result, actual, expected, message });\n}\n","export default function collapseWhitespace(string) {\n  return string\n    .replace(/[\\t\\r\\n]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/^ /, '')\n    .replace(/ $/, '');\n}\n","import exists from './assertions/exists';\nimport focused from './assertions/focused';\nimport notFocused from './assertions/not-focused';\nimport isChecked from './assertions/is-checked';\nimport isNotChecked from './assertions/is-not-checked';\nimport isRequired from './assertions/is-required';\nimport isNotRequired from './assertions/is-not-required';\nimport isVisible from './assertions/is-visible';\nimport isNotVisible from './assertions/is-not-visible';\nimport isDisabled from './assertions/is-disabled';\n\nimport elementToString from './helpers/element-to-string';\nimport collapseWhitespace from './helpers/collapse-whitespace';\n\nexport default class DOMAssertions {\n  constructor(target, rootElement, testContext) {\n    this.target = target;\n    this.rootElement = rootElement;\n    this.testContext = testContext;\n  }\n\n  /**\n   * Assert an [HTMLElement][] (or multiple) matching the `selector` exists.\n   *\n   * @name exists\n   * @param {object?} options\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('#title').exists();\n   * assert.dom('.choice').exists({ count: 4 });\n   *\n   * @see {@link #doesNotExist}\n   */\n  exists(options, message) {\n    exists.call(this, options, message);\n  }\n\n  /**\n   * Assert an [HTMLElement][] matching the `selector` does not exists.\n   *\n   * @name doesNotExist\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('.should-not-exist').doesNotExist();\n   *\n   * @see {@link #exists}\n   */\n  doesNotExist(message) {\n    exists.call(this, { count: 0 }, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is currently checked.\n   *\n   * @name isChecked\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.active').isChecked();\n   *\n   * @see {@link #isNotChecked}\n   */\n  isChecked(message) {\n    isChecked.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is currently unchecked.\n   *\n   * @name isNotChecked\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.active').isNotChecked();\n   *\n   * @see {@link #isChecked}\n   */\n  isNotChecked(message) {\n    isNotChecked.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is currently focused.\n   *\n   * @name isFocused\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.email').isFocused();\n   *\n   * @see {@link #isNotFocused}\n   */\n  isFocused(message) {\n    focused.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is not currently focused.\n   *\n   * @name isNotFocused\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input[type=\"password\"]').isNotFocused();\n   *\n   * @see {@link #isFocused}\n   */\n  isNotFocused(message) {\n    notFocused.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is currently required.\n   *\n   * @name isRequired\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input[type=\"text\"]').isRequired();\n   *\n   * @see {@link #isNotRequired}\n   */\n  isRequired(message) {\n    isRequired.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is currently not required.\n   *\n   * @name isNotRequired\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input[type=\"text\"]').isNotRequired();\n   *\n   * @see {@link #isRequired}\n   */\n  isNotRequired(message) {\n    isNotRequired.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is visible. Visibility is determined with the heuristic\n   * used in [jQuery's :visible pseudo-selector](https://github.com/jquery/jquery/blob/2d4f53416e5f74fa98e0c1d66b6f3c285a12f0ce/src/css/hiddenVisibleSelectors.js#L12),\n   * specifically:\n   *\n   * - the element's offsetWidth is non-zero\n   * - the element's offsetHeight is non-zero\n   * - the length of an element's DOMRect objects found via getClientRects() is non-zero\n   *\n   * Additionally, visibility in this case means that the element is visible on the page,\n   * but not necessarily in the viewport.\n   *\n   * @name isVisible\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('.foo').isVisible();\n   *\n   * @see {@link #isNotVisible}\n   */\n  isVisible(message) {\n    isVisible.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is not visible on the page.\n   *\n   * Visibility is determined with the heuristic used in jQuery's\n   * [`:visible`](https://github.com/jquery/jquery/blob/2d4f53416e5f74fa98e0c1d66b6f3c285a12f0ce/src/css/hiddenVisibleSelectors.js#L12)\n   * pseudo-selector:\n   *\n   * - the element's offsetWidth is non-zero\n   * - the element's offsetHeight is non-zero\n   * - the length of an element's DOMRect objects found via getClientRects() is non-zero\n   *\n   * Additionally, visibility in this case means that the element is visible on the page,\n   * but not necessarily in the viewport.\n   *\n   * @name isNotVisible\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('.foo').isNotVisible();\n   *\n   * @see {@link #isVisible}\n   */\n  isNotVisible(message) {\n    isNotVisible.call(this, message);\n  }\n\n  /**\n   * Assert that the [HTMLElement][] has an attribute with the provided `name`\n   * and optionally checks if the attribute `value` matches the provided text\n   * or regular expression.\n   *\n   * @name hasAttribute\n   * @param {string} name\n   * @param {string|RegExp|object?} value\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.password-input').hasAttribute('type', 'password');\n\n   * @see {@link #doesNotHaveAttribute}\n   */\n  hasAttribute(name, value, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    if (arguments.length === 1) {\n      value = { any: true };\n    }\n\n    let actualValue = element.getAttribute(name);\n\n    if (value instanceof RegExp) {\n      let result = value.test(actualValue);\n      let expected = `Element ${this.targetDescription} has attribute \"${name}\" with value matching ${value}`;\n      let actual = actualValue === null\n        ? `Element ${this.targetDescription} does not have attribute \"${name}\"`\n        : `Element ${this.targetDescription} has attribute \"${name}\" with value ${JSON.stringify(actualValue)}`;\n\n      if (!message) {\n        message = expected;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n\n    } else if (value.any === true) {\n      let result = actualValue !== null;\n      let expected = `Element ${this.targetDescription} has attribute \"${name}\"`;\n      let actual = result ? expected : `Element ${this.targetDescription} does not have attribute \"${name}\"`;\n\n      if (!message) {\n        message = expected;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n\n    } else {\n      let result = value === actualValue;\n      let expected = `Element ${this.targetDescription} has attribute \"${name}\" with value ${JSON.stringify(value)}`;\n      let actual = actualValue === null\n        ? `Element ${this.targetDescription} does not have attribute \"${name}\"`\n        : `Element ${this.targetDescription} has attribute \"${name}\" with value ${JSON.stringify(actualValue)}`;\n\n      if (!message) {\n        message = expected;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n    }\n  }\n\n  /**\n   * Assert that the [HTMLElement][] has no attribute with the provided `name`.\n   *\n   * **Aliases:** `hasNoAttribute`, `lacksAttribute`\n   *\n   * @name doesNotHaveAttribute\n   * @param {string} name\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.username').hasNoAttribute('disabled');\n   *\n   * @see {@link #hasAttribute}\n   */\n  doesNotHaveAttribute(name, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    let result = !element.hasAttribute(name);\n    let expected = `Element ${this.targetDescription} does not have attribute \"${name}\"`;\n    let actual = expected;\n\n    if (!result) {\n      let value = element.getAttribute(name);\n      actual = `Element ${this.targetDescription} has attribute \"${name}\" with value ${JSON.stringify(value)}`;\n    }\n\n    if (!message) {\n      message = expected;\n    }\n\n    this.pushResult({ result, actual, expected, message });\n  }\n\n  hasNoAttribute(name, message) {\n    this.doesNotHaveAttribute(name, message);\n  }\n\n  lacksAttribute(name, message) {\n    this.doesNotHaveAttribute(name, message);\n  }\n\n  /**\n   *  Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is disabled.\n   *\n   * @name isDisabled\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('.foo').isDisabled();\n   *\n   * @see {@link #isNotDisabled}\n   */\n  isDisabled(message) {\n    isDisabled.call(this, message);\n  }\n\n  /**\n   *  Assert that the [HTMLElement][] or an [HTMLElement][] matching the\n   * `selector` is not disabled.\n   *\n   * @name isNotDisabled\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('.foo').isNotDisabled();\n   *\n   * @see {@link #isDisabled}\n   */\n  isNotDisabled(message) {\n    isDisabled.call(this, message, { inverted: true });\n  }\n\n  /**\n   * Assert that the [HTMLElement][] has the `expected` CSS class using\n   * [`classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList).\n   *\n   * @name hasClass\n   * @param {string} expected\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input[type=\"password\"]').hasClass('secret-password-input');\n   *\n   * @see {@link #doesNotHaveClass}\n   */\n  hasClass(expected, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    let actual = element.classList.toString();\n    let result = element.classList.contains(expected);\n\n    if (!message) {\n      message = `Element ${this.targetDescription} has CSS class \"${expected}\"`;\n    }\n\n    this.pushResult({ result, actual, expected, message });\n  }\n\n  /**\n   * Assert that the [HTMLElement][] does not have the `expected` CSS class using\n   * [`classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList).\n   *\n   * **Aliases:** `hasNoClass`, `lacksClass`\n   *\n   * @name doesNotHaveClass\n   * @param {string} expected\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input[type=\"password\"]').doesNotHaveClass('username-input');\n   *\n   * @see {@link #hasClass}\n   */\n  doesNotHaveClass(expected, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    let result = !element.classList.contains(expected);\n    let actual = element.classList.toString();\n\n    if (!message) {\n      message = `Element ${this.targetDescription} does not have CSS class \"${expected}\"`;\n    }\n\n    this.pushResult({ result, actual, expected: `not: ${expected}`, message });\n  }\n\n  hasNoClass(expected, message) {\n    this.doesNotHaveClass(expected, message);\n  }\n\n  lacksClass(expected, message) {\n    this.doesNotHaveClass(expected, message);\n  }\n\n  /**\n   * Assert that the text of the [HTMLElement][] or an [HTMLElement][]\n   * matching the `selector` matches the `expected` text, using the\n   * [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n   * attribute and stripping/collapsing whitespace.\n   *\n   * `expected` can also be a regular expression.\n   *\n   * **Aliases:** `matchesText`\n   *\n   * @name hasText\n   * @param {string|RegExp} expected\n   * @param {string?} message\n   *\n   * @example\n   * // <h2 id=\"title\">\n   * //   Welcome to <b>QUnit</b>\n   * // </h2>\n   *\n   * assert.dom('#title').hasText('Welcome to QUnit');\n   *\n   * @example\n   * assert.dom('.foo').hasText(/[12]\\d{3}/);\n   *\n   * @see {@link #includesText}\n   */\n  hasText(expected, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    if (expected instanceof RegExp) {\n      let result = expected.test(element.textContent);\n      let actual = element.textContent;\n\n      if (!message) {\n        message = `Element ${this.targetDescription} has text matching ${expected}`;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n    } else if (expected.any === true) {\n      let result = Boolean(element.textContent);\n\n      let expected = `Element ${this.targetDescription} has a text`;\n      let actual = result ? expected : `Element ${this.targetDescription} has no text`;\n\n      if (!message) {\n        message = expected;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n\n    } else if (typeof expected === 'string') {\n      expected = collapseWhitespace(expected);\n      let actual = collapseWhitespace(element.textContent);\n      let result = actual === expected;\n\n      if (!message) {\n        message = `Element ${this.targetDescription} has text \"${expected}\"`;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n    } else {\n      throw new TypeError(`You must pass a string or Regular Expression to \"hasText\". You passed ${expected}.`);\n    }\n  }\n\n  matchesText(expected, message) {\n    this.hasText(expected, message);\n  }\n\n  /**\n   * Assert that the `textContent` property of an [HTMLElement][] is not empty.\n   *\n   * @name hasAnyText\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('button.share').hasAnyText();\n   *\n   * @see {@link #hasText}\n   */\n  hasAnyText(message) {\n    this.hasText({ any: true }, message);\n  }\n\n  /**\n   * Assert that the text of the [HTMLElement][] or an [HTMLElement][]\n   * matching the `selector` contains the given `text`, using the\n   * [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n   * attribute.\n   *\n   * **Aliases:** `containsText`, `hasTextContaining`\n   *\n   * @name includesText\n   * @param {string} text\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('#title').includesText('Welcome');\n   *\n   * @see {@link #hasText}\n   */\n  includesText(text, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    let result = element.textContent.indexOf(text) !== -1;\n    let actual = element.textContent;\n    let expected = text;\n\n    if (!message) {\n      message = `Element ${this.targetDescription} has text containing \"${text}\"`;\n    }\n\n    this.pushResult({ result, actual, expected, message });\n  }\n\n  containsText(expected, message) {\n    this.includesText(expected, message);\n  }\n\n  hasTextContaining(expected, message) {\n    this.includesText(expected, message);\n  }\n\n  /**\n   * Assert that the text of the [HTMLElement][] or an [HTMLElement][]\n   * matching the `selector` does not include the given `text`, using the\n   * [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n   * attribute.\n   *\n   * **Aliases:** `doesNotContainText`, `doesNotHaveTextContaining`\n   *\n   * @name doesNotIncludeText\n   * @param {string} text\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('#title').doesNotIncludeText('Welcome');\n   */\n  doesNotIncludeText(text, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    let result = element.textContent.indexOf(text) === -1;\n    let expected = `Element ${this.targetDescription} does not include text \"${text}\"`;\n    let actual = expected;\n\n    if (!result) {\n      actual = `Element ${this.targetDescription} includes text \"${text}\"`;\n    }\n\n    if (!message) {\n      message = expected;\n    }\n\n    this.pushResult({ result, actual, expected, message });\n  }\n\n  doesNotContainText(unexpected, message) {\n    this.doesNotIncludeText(unexpected, message);\n  }\n\n  doesNotHaveTextContaining(unexpected, message) {\n    this.doesNotIncludeText(unexpected, message);\n  }\n\n  /**\n   * Assert that the `value` property of an [HTMLInputElement][] matches\n   * the `expected` text or regular expression.\n   *\n   * If no `expected` value is provided, the assertion will fail if the\n   * `value` is an empty string.\n   *\n   * @name hasValue\n   * @param {string|RegExp|object?} expected\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.username').hasValue('HSimpson');\n\n   * @see {@link #hasAnyValue}\n   * @see {@link #hasNoValue}\n   */\n  hasValue(expected, message) {\n    let element = this.findTargetElement();\n    if (!element) return;\n\n    if (arguments.length === 0) {\n      expected = { any: true };\n    }\n\n    if (expected instanceof RegExp) {\n      let result = expected.test(element.value);\n      let actual = element.value;\n\n      if (!message) {\n        message = `Element ${this.targetDescription} has value matching ${expected}`;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n\n    } else if (expected.any === true) {\n      let result = Boolean(element.value);\n\n      let expected = `Element ${this.targetDescription} has a value`;\n      let actual = result ? expected : `Element ${this.targetDescription} has no value`;\n\n      if (!message) {\n        message = expected;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n\n    } else {\n      let actual = element.value;\n      let result = actual === expected;\n\n      if (!message) {\n        message = `Element ${this.targetDescription} has value \"${expected}\"`;\n      }\n\n      this.pushResult({ result, actual, expected, message });\n    }\n  }\n\n  /**\n   * Assert that the `value` property of an [HTMLInputElement][] is not empty.\n   *\n   * @name hasAnyValue\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.username').hasAnyValue();\n   *\n   * @see {@link #hasValue}\n   * @see {@link #hasNoValue}\n   */\n  hasAnyValue(message) {\n    this.hasValue({ any: true }, message);\n  }\n\n  /**\n   * Assert that the `value` property of an [HTMLInputElement][] is empty.\n   *\n   * **Aliases:** `lacksValue`\n   *\n   * @name hasNoValue\n   * @param {string?} message\n   *\n   * @example\n   * assert.dom('input.username').hasNoValue();\n   *\n   * @see {@link #hasValue}\n   * @see {@link #hasAnyValue}\n   */\n  hasNoValue(message) {\n    this.hasValue('', message);\n  }\n\n  lacksValue(message) {\n    this.hasNoValue(message);\n  }\n\n  /**\n   * @private\n   */\n  pushResult(result) {\n    this.testContext.pushResult(result);\n  }\n\n  /**\n   * @private\n   */\n  findTargetElement() {\n    if (this.target === null) {\n      let message = `Element <unknown> exists`;\n      this.pushResult({ message, result: false });\n      return null;\n    }\n\n    if (typeof this.target === 'string') {\n      let el = this.rootElement.querySelector(this.target);\n\n      if (el === null) {\n        let message = `Element ${this.target || '<unknown>'} exists`;\n        this.pushResult({ message, result: false });\n      }\n\n      return el;\n\n    } else if (this.target instanceof Element) {\n      return this.target;\n\n    } else {\n      throw new TypeError(`Unexpected Parameter: ${this.target}`)\n    }\n  }\n\n  /**\n   * @private\n   */\n  get targetDescription() {\n    return elementToString(this.target);\n  }\n}\n","import * as QUnit from 'qunit';\n\nimport DOMAssertions from './assertions';\n\nQUnit.extend(QUnit.assert, {\n  dom(target, rootElement) {\n    rootElement = rootElement || this.dom.rootElement || document;\n    return new DOMAssertions(target || rootElement, rootElement, this);\n  }\n});\n"],"names":["exists","options","message","target","TypeError","undefined","elements","rootElement","querySelectorAll","expectedCount","count","result","length","expected","format","actual","pushResult","selector","num","elementToString","el","desc","window","NodeList","Array","prototype","slice","call","map","join","HTMLElement","String","tagName","toLowerCase","id","className","replace","forEach","attributes","attr","name","value","focused","element","findTargetElement","document","activeElement","notFocused","targetDescription","checked","notChecked","required","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","toString","notRequired","visible","offsetWidth","offsetHeight","clientRects","getClientRects","i","rect","width","height","isVisible","isNotVisible","isDisabled","inverted","HTMLButtonElement","HTMLOptGroupElement","HTMLOptionElement","HTMLFieldSetElement","disabled","collapseWhitespace","string","DOMAssertions","testContext","arguments","any","actualValue","getAttribute","RegExp","test","JSON","stringify","hasAttribute","doesNotHaveAttribute","classList","contains","doesNotHaveClass","textContent","Boolean","hasText","text","indexOf","includesText","unexpected","doesNotIncludeText","hasValue","hasNoValue","querySelector","Element","QUnit","dom"],"mappings":";;;AAAe,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;MAC3C,OAAO,KAAKC,MAAZ,KAAuB,QAA3B,EAAqC;UAC7B,IAAIC,SAAJ,4BAAuC,KAAKD,MAA5C,CAAN;;;MAGE,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;cACrBA,OAAV;cACUI,SAAV;;;MAGEC,WAAW,KAAKC,WAAL,CAAiBC,gBAAjB,CAAkC,KAAKL,MAAvC,CAAf;;MAEIM,gBAAgBR,UAAUA,QAAQS,KAAlB,GAA0B,IAA9C;;MAEID,kBAAkB,IAAtB,EAA4B;QACtBE,SAASL,SAASM,MAAT,GAAkB,CAA/B;QACIC,WAAWC,OAAO,KAAKX,MAAZ,CAAf;QACIY,SAASJ,SAASE,QAAT,GAAoBC,OAAO,KAAKX,MAAZ,EAAoB,CAApB,CAAjC;;QAEI,CAACD,OAAL,EAAc;gBACFW,QAAV;;;SAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;GATF,MAWO,IAAI,OAAOO,aAAP,KAAyB,QAA7B,EAAuC;QACxCE,UAASL,SAASM,MAAT,KAAoBH,aAAjC;QACIM,UAASD,OAAO,KAAKX,MAAZ,EAAoBG,SAASM,MAA7B,CAAb;QACIC,YAAWC,OAAO,KAAKX,MAAZ,EAAoBM,aAApB,CAAf;;QAEI,CAACP,OAAL,EAAc;gBACFW,SAAV;;;SAGGG,UAAL,CAAgB,EAACL,eAAD,EAASI,eAAT,EAAiBF,mBAAjB,EAA2BX,gBAA3B,EAAhB;GATK,MAWA;UACC,IAAIE,SAAJ,4BAAuCK,aAAvC,CAAN;;;;AAIJ,SAASK,MAAT,CAAgBG,QAAhB,EAA0BC,GAA1B,EAA+B;MACzBA,QAAQb,SAAR,IAAqBa,QAAQ,IAAjC,EAAuC;wBACnBD,QAAlB;GADF,MAEO,IAAIC,QAAQ,CAAZ,EAAe;wBACFD,QAAlB;GADK,MAEA,IAAIC,QAAQ,CAAZ,EAAe;wBACFD,QAAlB;GADK,MAEA,IAAIC,QAAQ,CAAZ,EAAe;wBACFD,QAAlB;GADK,MAEA;wBACaA,QAAlB,gBAAqCC,GAArC;;;;ACnDJ;;AAEA,AAAe,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;MACtCC,aAAJ;MACID,cAAcE,OAAOC,QAAzB,EAAmC;QAC7BH,GAAGR,MAAH,KAAc,CAAlB,EAAqB;aAAS,gBAAP;;WAChBY,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BP,EAA3B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqCQ,GAArC,CAAyCT,eAAzC,EAA0DU,IAA1D,CAA+D,IAA/D,CAAP;WACOT,GAAGR,MAAH,GAAY,CAAZ,GAAmBS,IAAnB,eAAgCD,GAAGR,MAAH,GAAY,CAA5C,eAAwDS,IAA/D;;MAEE,EAAED,cAAcE,OAAOQ,WAAvB,CAAJ,EAAyC;WAChCC,OAAOX,EAAP,CAAP;;;SAGKA,GAAGY,OAAH,CAAWC,WAAX,EAAP;MACIb,GAAGc,EAAP,EAAW;kBACGd,GAAGc,EAAf;;MAEEd,GAAGe,SAAP,EAAkB;kBACJJ,OAAOX,GAAGe,SAAV,EAAqBC,OAArB,CAA6B,MAA7B,EAAqC,GAArC,CAAZ;;QAEIX,SAAN,CAAgBY,OAAhB,CAAwBV,IAAxB,CAA6BP,GAAGkB,UAAhC,EAA4C,UAASC,IAAT,EAAe;QACrDA,KAAKC,IAAL,KAAc,OAAd,IAAyBD,KAAKC,IAAL,KAAc,IAA3C,EAAiD;oBACnCD,KAAKC,IAAjB,IAAwBD,KAAKE,KAAL,UAAkBF,KAAKE,KAAvB,UAAmC,GAA3D;;GAFJ;SAKOpB,IAAP;;;ACvBa,SAASqB,OAAT,CAAiBxC,OAAjB,EAA0B;MACnCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEVhC,SAASkC,SAASC,aAAT,KAA2BH,OAAxC;MACI5B,SAASI,gBAAgB0B,SAASC,aAAzB,CAAb;MACIjC,WAAWM,gBAAgB,KAAKhB,MAArB,CAAf;;MAEI,CAACD,OAAL,EAAc;2BACSW,QAArB;;;OAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;ACda,SAAS6C,UAAT,CAAoB7C,OAApB,EAA6B;MACtCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEVhC,SAASkC,SAASC,aAAT,KAA2BH,OAAxC;;MAEI,CAACzC,OAAL,EAAc;2BACS,KAAK8C,iBAA1B;;;OAGGhC,UAAL,CAAgB,EAAEL,cAAF,EAAUT,gBAAV,EAAhB;;;ACRa,SAAS+C,OAAT,CAAiB/C,OAAjB,EAA0B;MACnCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEVhC,SAASgC,QAAQM,OAAR,KAAoB,IAAjC;MACIlC,SAAS4B,QAAQM,OAAR,KAAoB,IAApB,GAA2B,SAA3B,GAAuC,aAApD;MACIpC,WAAW,SAAf;;MAEI,CAACX,OAAL,EAAc;2BACSiB,gBAAgB,KAAKhB,MAArB,CAArB;;;OAGGa,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;ACZa,SAASgD,UAAT,CAAoBhD,OAApB,EAA6B;MACtCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEVhC,SAASgC,QAAQM,OAAR,KAAoB,KAAjC;MACIlC,SAAS4B,QAAQM,OAAR,KAAoB,IAApB,GAA2B,SAA3B,GAAuC,aAApD;MACIpC,WAAW,aAAf;;MAEI,CAACX,OAAL,EAAc;2BACSiB,gBAAgB,KAAKhB,MAArB,CAArB;;;OAGGa,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;ACZa,SAASiD,QAAT,CAAkBjD,OAAlB,EAA2B;MACpCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEV,EACFA,mBAAmBS,gBAAnB,IACAT,mBAAmBU,mBADnB,IAEAV,mBAAmBW,iBAHjB,CAAJ,EAIG;UACK,IAAIlD,SAAJ,+BAA0CuC,QAAQY,QAAR,EAA1C,CAAN;;;MAGE5C,SAASgC,QAAQQ,QAAR,KAAqB,IAAlC;MACIpC,SAASJ,SAAS,UAAT,GAAsB,cAAnC;MACIE,WAAW,UAAf;;MAEI,CAACX,OAAL,EAAc;2BACSiB,gBAAgB,KAAKhB,MAArB,CAArB;;;OAGGa,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;ACpBa,SAASsD,WAAT,CAAqBtD,OAArB,EAA8B;MACvCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEV,EACFA,mBAAmBS,gBAAnB,IACAT,mBAAmBU,mBADnB,IAEAV,mBAAmBW,iBAHjB,CAAJ,EAIG;UACK,IAAIlD,SAAJ,+BAA0CuC,QAAQY,QAAR,EAA1C,CAAN;;;MAGE5C,SAASgC,QAAQQ,QAAR,KAAqB,KAAlC;MACIpC,SAAS,CAACJ,MAAD,GAAU,UAAV,GAAuB,cAApC;MACIE,WAAW,cAAf;;MAEI,CAACX,OAAL,EAAc;2BACSiB,gBAAgB,KAAKhB,MAArB,CAArB;;;OAGGa,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;ACtBF;;;AAGA,AAAe,SAASuD,OAAT,CAAiBrC,EAAjB,EAAqB;MAC9BA,OAAO,IAAX,EAAiB,OAAO,KAAP;MACbA,GAAGsC,WAAH,KAAmB,CAAnB,IAAwBtC,GAAGuC,YAAH,KAAoB,CAAhD,EAAmD,OAAO,KAAP;;MAE/CC,cAAcxC,GAAGyC,cAAH,EAAlB;MACID,YAAYhD,MAAZ,KAAuB,CAA3B,EAA8B,OAAO,KAAP;OACzB,IAAIkD,IAAI,CAAb,EAAgBA,IAAIF,YAAYhD,MAAhC,EAAwCkD,GAAxC,EAA6C;QACvCC,OAAOH,YAAYE,CAAZ,CAAX;QACIC,KAAKC,KAAL,KAAe,CAAf,IAAoBD,KAAKE,MAAL,KAAgB,CAAxC,EAA2C,OAAO,IAAP;;;SAGtC,KAAP;;;ACZa,SAASC,SAAT,CAAmBhE,OAAnB,EAA4B;MACrCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEVhC,SAAS8C,QAAQd,OAAR,CAAb;MACI5B,SAASJ,sBACE,KAAKR,MADP,gCAEE,KAAKA,MAFP,oBAAb;MAGIU,wBAAsB,KAAKV,MAA3B,gBAAJ;;MAEI,CAACD,OAAL,EAAc;cACFW,QAAV;;;OAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;ACda,SAASiE,YAAT,CAAsBjE,OAAtB,EAA+B;MACxCyC,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEVhC,SAAS,CAAC8C,QAAQd,OAAR,CAAd;MACI5B,SAASJ,sBACE,KAAKR,MADP,oCAEE,KAAKA,MAFP,gBAAb;MAGIU,wBAAsB,KAAKV,MAA3B,oBAAJ;;MAEI,CAACD,OAAL,EAAc;cACFW,QAAV;;;OAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;AChBa,SAASkE,UAAT,CAAoBlE,OAApB,EAA2C;MAAdD,OAAc,uEAAJ,EAAI;MAClDoE,QADkD,GACrCpE,OADqC,CAClDoE,QADkD;;;MAGpD1B,UAAU,KAAKC,iBAAL,EAAd;MACI,CAACD,OAAL,EAAc;;MAEV,EACAA,mBAAmBS,gBAAnB,IACAT,mBAAmBU,mBADnB,IAEAV,mBAAmBW,iBAFnB,IAGAX,mBAAmB2B,iBAHnB,IAIA3B,mBAAmB4B,mBAJnB,IAKA5B,mBAAmB6B,iBALnB,IAMA7B,mBAAmB8B,mBAPnB,CAAJ,EAQK;UACG,IAAIrE,SAAJ,+BAA0CuC,QAAQY,QAAR,EAA1C,CAAN;;;MAGE5C,SAASgC,QAAQ+B,QAAR,KAAqB,CAACL,QAAnC;;MAEItD,SAAS4B,QAAQ+B,QAAR,KAAqB,KAArB,gBACE,KAAK1B,iBADP,qCAEE,KAAKA,iBAFP,iBAAb;;MAIInC,WAAWwD,wBACA,KAAKrB,iBADL,qCAEA,KAAKA,iBAFL,iBAAf;;MAII,CAAC9C,OAAL,EAAc;cACFW,QAAV;;;OAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;AChCa,SAASyE,kBAAT,CAA4BC,MAA5B,EAAoC;SAC1CA,OACJxC,OADI,CACI,WADJ,EACiB,GADjB,EAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,IAHJ,EAGU,EAHV,EAIJA,OAJI,CAII,IAJJ,EAIU,EAJV,CAAP;;;;;;;ACDF,IAcqByC;yBACP1E,MAAZ,EAAoBI,WAApB,EAAiCuE,WAAjC,EAA8C;;;SACvC3E,MAAL,GAAcA,MAAd;SACKI,WAAL,GAAmBA,WAAnB;SACKuE,WAAL,GAAmBA,WAAnB;;;;;;;;;;;;;;;;;;;;8BAgBK7E,SAASC,SAAS;aAChByB,IAAP,CAAY,IAAZ,EAAkB1B,OAAlB,EAA2BC,OAA3B;;;;;;;;;;;;;;;;;iCAcWA,SAAS;aACbyB,IAAP,CAAY,IAAZ,EAAkB,EAAEjB,OAAO,CAAT,EAAlB,EAAgCR,OAAhC;;;;;;;;;;;;;;;;;;8BAeQA,SAAS;cACPyB,IAAV,CAAe,IAAf,EAAqBzB,OAArB;;;;;;;;;;;;;;;;;;iCAeWA,SAAS;iBACPyB,IAAb,CAAkB,IAAlB,EAAwBzB,OAAxB;;;;;;;;;;;;;;;;;;8BAeQA,SAAS;cACTyB,IAAR,CAAa,IAAb,EAAmBzB,OAAnB;;;;;;;;;;;;;;;;;;iCAeWA,SAAS;iBACTyB,IAAX,CAAgB,IAAhB,EAAsBzB,OAAtB;;;;;;;;;;;;;;;;;;+BAeSA,SAAS;eACPyB,IAAX,CAAgB,IAAhB,EAAsBzB,OAAtB;;;;;;;;;;;;;;;;;;kCAeYA,SAAS;kBACPyB,IAAd,CAAmB,IAAnB,EAAyBzB,OAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAwBQA,SAAS;gBACPyB,IAAV,CAAe,IAAf,EAAqBzB,OAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCA0BWA,SAAS;mBACPyB,IAAb,CAAkB,IAAlB,EAAwBzB,OAAxB;;;;;;;;;;;;;;;;;;;;iCAkBWsC,MAAMC,OAAOvC,SAAS;UAC7ByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEVoC,UAAUnE,MAAV,KAAqB,CAAzB,EAA4B;gBAClB,EAAEoE,KAAK,IAAP,EAAR;;;UAGEC,cAActC,QAAQuC,YAAR,CAAqB1C,IAArB,CAAlB;;UAEIC,iBAAiB0C,MAArB,EAA6B;YACvBxE,SAAS8B,MAAM2C,IAAN,CAAWH,WAAX,CAAb;YACIpE,wBAAsB,KAAKmC,iBAA3B,wBAA+DR,IAA/D,8BAA4FC,KAAhG;YACI1B,SAASkE,gBAAgB,IAAhB,gBACE,KAAKjC,iBADP,kCACqDR,IADrD,sBAEE,KAAKQ,iBAFP,wBAE2CR,IAF3C,qBAE+D6C,KAAKC,SAAL,CAAeL,WAAf,CAF5E;;YAII,CAAC/E,OAAL,EAAc;oBACFW,QAAV;;;aAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;OAXF,MAaO,IAAIuC,MAAMuC,GAAN,KAAc,IAAlB,EAAwB;YACzBrE,UAASsE,gBAAgB,IAA7B;YACIpE,yBAAsB,KAAKmC,iBAA3B,wBAA+DR,IAA/D,MAAJ;YACIzB,UAASJ,UAASE,SAAT,gBAA+B,KAAKmC,iBAApC,kCAAkFR,IAAlF,MAAb;;YAEI,CAACtC,OAAL,EAAc;oBACFW,SAAV;;;aAGGG,UAAL,CAAgB,EAAEL,eAAF,EAAUI,eAAV,EAAkBF,mBAAlB,EAA4BX,gBAA5B,EAAhB;OATK,MAWA;YACDS,WAAS8B,UAAUwC,WAAvB;YACIpE,0BAAsB,KAAKmC,iBAA3B,wBAA+DR,IAA/D,qBAAmF6C,KAAKC,SAAL,CAAe7C,KAAf,CAAvF;YACI1B,WAASkE,gBAAgB,IAAhB,gBACE,KAAKjC,iBADP,kCACqDR,IADrD,sBAEE,KAAKQ,iBAFP,wBAE2CR,IAF3C,qBAE+D6C,KAAKC,SAAL,CAAeL,WAAf,CAF5E;;YAII,CAAC/E,OAAL,EAAc;oBACFW,UAAV;;;aAGGG,UAAL,CAAgB,EAAEL,gBAAF,EAAUI,gBAAV,EAAkBF,oBAAlB,EAA4BX,gBAA5B,EAAhB;;;;;;;;;;;;;;;;;;;;;yCAkBiBsC,MAAMtC,SAAS;UAC9ByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEVhC,SAAS,CAACgC,QAAQ4C,YAAR,CAAqB/C,IAArB,CAAd;UACI3B,wBAAsB,KAAKmC,iBAA3B,kCAAyER,IAAzE,MAAJ;UACIzB,SAASF,QAAb;;UAEI,CAACF,MAAL,EAAa;YACP8B,QAAQE,QAAQuC,YAAR,CAAqB1C,IAArB,CAAZ;8BACoB,KAAKQ,iBAAzB,wBAA6DR,IAA7D,qBAAiF6C,KAAKC,SAAL,CAAe7C,KAAf,CAAjF;;;UAGE,CAACvC,OAAL,EAAc;kBACFW,QAAV;;;WAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;;mCAGasC,MAAMtC,SAAS;WACvBsF,oBAAL,CAA0BhD,IAA1B,EAAgCtC,OAAhC;;;;mCAGasC,MAAMtC,SAAS;WACvBsF,oBAAL,CAA0BhD,IAA1B,EAAgCtC,OAAhC;;;;;;;;;;;;;;;;;;kCAeSA,SAAS;iBACPyB,IAAX,CAAgB,IAAhB,EAAsBzB,OAAtB;;;;;;;;;;;;;;;;;;kCAeYA,SAAS;iBACVyB,IAAX,CAAgB,IAAhB,EAAsBzB,OAAtB,EAA+B,EAAEmE,UAAU,IAAZ,EAA/B;;;;;;;;;;;;;;;;;;;6BAgBOxD,UAAUX,SAAS;UACtByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEV5B,SAAS4B,QAAQ8C,SAAR,CAAkBlC,QAAlB,EAAb;UACI5C,SAASgC,QAAQ8C,SAAR,CAAkBC,QAAlB,CAA2B7E,QAA3B,CAAb;;UAEI,CAACX,OAAL,EAAc;+BACS,KAAK8C,iBAA1B,wBAA8DnC,QAA9D;;;WAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;;;;;;;;;;;;;;;;;;;qCAkBeW,UAAUX,SAAS;UAC9ByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEVhC,SAAS,CAACgC,QAAQ8C,SAAR,CAAkBC,QAAlB,CAA2B7E,QAA3B,CAAd;UACIE,SAAS4B,QAAQ8C,SAAR,CAAkBlC,QAAlB,EAAb;;UAEI,CAACrD,OAAL,EAAc;+BACS,KAAK8C,iBAA1B,kCAAwEnC,QAAxE;;;WAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,oBAAkBA,QAApC,EAAgDX,gBAAhD,EAAhB;;;;+BAGSW,UAAUX,SAAS;WACvByF,gBAAL,CAAsB9E,QAAtB,EAAgCX,OAAhC;;;;+BAGSW,UAAUX,SAAS;WACvByF,gBAAL,CAAsB9E,QAAtB,EAAgCX,OAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA6BMW,UAAUX,SAAS;UACrByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEV9B,oBAAoBsE,MAAxB,EAAgC;YAC1BxE,SAASE,SAASuE,IAAT,CAAczC,QAAQiD,WAAtB,CAAb;YACI7E,SAAS4B,QAAQiD,WAArB;;YAEI,CAAC1F,OAAL,EAAc;iCACS,KAAK8C,iBAA1B,2BAAiEnC,QAAjE;;;aAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;OARF,MASO,IAAIW,SAASmE,GAAT,KAAiB,IAArB,EAA2B;YAC5BrE,WAASkF,QAAQlD,QAAQiD,WAAhB,CAAb;;YAEI/E,0BAAsB,KAAKmC,iBAA3B,gBAAJ;YACIjC,WAASJ,WAASE,UAAT,gBAA+B,KAAKmC,iBAApC,iBAAb;;YAEI,CAAC9C,OAAL,EAAc;oBACFW,UAAV;;;aAGGG,UAAL,CAAgB,EAAEL,gBAAF,EAAUI,gBAAV,EAAkBF,oBAAlB,EAA4BX,gBAA5B,EAAhB;OAVK,MAYA,IAAI,OAAOW,QAAP,KAAoB,QAAxB,EAAkC;mBAC5B8D,mBAAmB9D,QAAnB,CAAX;YACIE,WAAS4D,mBAAmBhC,QAAQiD,WAA3B,CAAb;YACIjF,WAASI,aAAWF,QAAxB;;YAEI,CAACX,OAAL,EAAc;iCACS,KAAK8C,iBAA1B,mBAAyDnC,QAAzD;;;aAGGG,UAAL,CAAgB,EAAEL,gBAAF,EAAUI,gBAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;OATK,MAUA;cACC,IAAIE,SAAJ,4EAAuFS,QAAvF,OAAN;;;;;gCAIQA,UAAUX,SAAS;WACxB4F,OAAL,CAAajF,QAAb,EAAuBX,OAAvB;;;;;;;;;;;;;;;;;+BAcSA,SAAS;WACb4F,OAAL,CAAa,EAAEd,KAAK,IAAP,EAAb,EAA4B9E,OAA5B;;;;;;;;;;;;;;;;;;;;;;;iCAoBW6F,MAAM7F,SAAS;UACtByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEVhC,SAASgC,QAAQiD,WAAR,CAAoBI,OAApB,CAA4BD,IAA5B,MAAsC,CAAC,CAApD;UACIhF,SAAS4B,QAAQiD,WAArB;UACI/E,WAAWkF,IAAf;;UAEI,CAAC7F,OAAL,EAAc;+BACS,KAAK8C,iBAA1B,8BAAoE+C,IAApE;;;WAGG/E,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;;iCAGWW,UAAUX,SAAS;WACzB+F,YAAL,CAAkBpF,QAAlB,EAA4BX,OAA5B;;;;sCAGgBW,UAAUX,SAAS;WAC9B+F,YAAL,CAAkBpF,QAAlB,EAA4BX,OAA5B;;;;;;;;;;;;;;;;;;;;;uCAkBiB6F,MAAM7F,SAAS;UAC5ByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEVhC,SAASgC,QAAQiD,WAAR,CAAoBI,OAApB,CAA4BD,IAA5B,MAAsC,CAAC,CAApD;UACIlF,wBAAsB,KAAKmC,iBAA3B,gCAAuE+C,IAAvE,MAAJ;UACIhF,SAASF,QAAb;;UAEI,CAACF,MAAL,EAAa;8BACS,KAAKqC,iBAAzB,wBAA6D+C,IAA7D;;;UAGE,CAAC7F,OAAL,EAAc;kBACFW,QAAV;;;WAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;;uCAGiBgG,YAAYhG,SAAS;WACjCiG,kBAAL,CAAwBD,UAAxB,EAAoChG,OAApC;;;;8CAGwBgG,YAAYhG,SAAS;WACxCiG,kBAAL,CAAwBD,UAAxB,EAAoChG,OAApC;;;;;;;;;;;;;;;;;;;;;;6BAoBOW,UAAUX,SAAS;UACtByC,UAAU,KAAKC,iBAAL,EAAd;UACI,CAACD,OAAL,EAAc;;UAEVoC,UAAUnE,MAAV,KAAqB,CAAzB,EAA4B;mBACf,EAAEoE,KAAK,IAAP,EAAX;;;UAGEnE,oBAAoBsE,MAAxB,EAAgC;YAC1BxE,SAASE,SAASuE,IAAT,CAAczC,QAAQF,KAAtB,CAAb;YACI1B,SAAS4B,QAAQF,KAArB;;YAEI,CAACvC,OAAL,EAAc;iCACS,KAAK8C,iBAA1B,4BAAkEnC,QAAlE;;;aAGGG,UAAL,CAAgB,EAAEL,cAAF,EAAUI,cAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;OARF,MAUO,IAAIW,SAASmE,GAAT,KAAiB,IAArB,EAA2B;YAC5BrE,WAASkF,QAAQlD,QAAQF,KAAhB,CAAb;;YAEI5B,0BAAsB,KAAKmC,iBAA3B,iBAAJ;YACIjC,WAASJ,WAASE,UAAT,gBAA+B,KAAKmC,iBAApC,kBAAb;;YAEI,CAAC9C,OAAL,EAAc;oBACFW,UAAV;;;aAGGG,UAAL,CAAgB,EAAEL,gBAAF,EAAUI,gBAAV,EAAkBF,oBAAlB,EAA4BX,gBAA5B,EAAhB;OAVK,MAYA;YACDa,WAAS4B,QAAQF,KAArB;YACI9B,WAASI,aAAWF,QAAxB;;YAEI,CAACX,OAAL,EAAc;iCACS,KAAK8C,iBAA1B,oBAA0DnC,QAA1D;;;aAGGG,UAAL,CAAgB,EAAEL,gBAAF,EAAUI,gBAAV,EAAkBF,kBAAlB,EAA4BX,gBAA5B,EAAhB;;;;;;;;;;;;;;;;;;;gCAgBQA,SAAS;WACdkG,QAAL,CAAc,EAAEpB,KAAK,IAAP,EAAd,EAA6B9E,OAA7B;;;;;;;;;;;;;;;;;;;;+BAiBSA,SAAS;WACbkG,QAAL,CAAc,EAAd,EAAkBlG,OAAlB;;;;+BAGSA,SAAS;WACbmG,UAAL,CAAgBnG,OAAhB;;;;;;;;;+BAMSS,QAAQ;WACZmE,WAAL,CAAiB9D,UAAjB,CAA4BL,MAA5B;;;;;;;;;wCAMkB;UACd,KAAKR,MAAL,KAAgB,IAApB,EAA0B;YACpBD,oCAAJ;aACKc,UAAL,CAAgB,EAAEd,gBAAF,EAAWS,QAAQ,KAAnB,EAAhB;eACO,IAAP;;;UAGE,OAAO,KAAKR,MAAZ,KAAuB,QAA3B,EAAqC;YAC/BiB,KAAK,KAAKb,WAAL,CAAiB+F,aAAjB,CAA+B,KAAKnG,MAApC,CAAT;;YAEIiB,OAAO,IAAX,EAAiB;cACXlB,yBAAqB,KAAKC,MAAL,IAAe,WAApC,aAAJ;eACKa,UAAL,CAAgB,EAAEd,iBAAF,EAAWS,QAAQ,KAAnB,EAAhB;;;eAGKS,EAAP;OARF,MAUO,IAAI,KAAKjB,MAAL,YAAuBoG,OAA3B,EAAoC;eAClC,KAAKpG,MAAZ;OADK,MAGA;cACC,IAAIC,SAAJ,4BAAuC,KAAKD,MAA5C,CAAN;;;;;;;;;;wBAOoB;aACfgB,gBAAgB,KAAKhB,MAArB,CAAP;;;;;;;AC9rBJqG,YAAA,CAAaA,YAAb,EAA2B;KAAA,eACrBrG,MADqB,EACbI,WADa,EACA;kBACTA,eAAe,KAAKkG,GAAL,CAASlG,WAAxB,IAAuCsC,QAArD;WACO,IAAIgC,aAAJ,CAAkB1E,UAAUI,WAA5B,EAAyCA,WAAzC,EAAsD,IAAtD,CAAP;;CAHJ;;;;"}