'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _getSpecifierNames = require('./getSpecifierNames');

var _getSpecifierNames2 = _interopRequireDefault(_getSpecifierNames);

var _removeReferences = require('./removeReferences');

var _removeReferences2 = _interopRequireDefault(_removeReferences);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

module.exports = function () {
  return {
    manipulateOptions: function manipulateOptions(opts, parserOptions) {
      parserOptions.plugins.push('decorators');
      parserOptions.plugins.push('exportExtensions');
    },

    visitor: {
      ImportDeclaration: function ImportDeclaration(path, _ref) {
        var opts = _ref.opts;
        var imports = opts.imports,
            _opts$keepImports = opts.keepImports,
            keepImports = _opts$keepImports === undefined ? false : _opts$keepImports;
        var _path$node = path.node,
            source = _path$node.source,
            specifiers = _path$node.specifiers;

        var members = _lodash2.default.get(imports, _lodash2.default.get(source, 'value'));

        /*
         * Heads up! This condition omits processing of non-filtered imports.
         */
        if (!members) return;

        var specifiersForRemoval = (0, _getSpecifierNames2.default)(members, specifiers);
        var specifierNames = _lodash2.default.map(specifiersForRemoval, 'local.name');

        _lodash2.default.forEach(specifierNames, function (specifier) {
          return (0, _removeReferences2.default)(path, specifier);
        });

        if (keepImports) return false;
        if (specifiers.length === specifierNames.length) {
          path.remove();
          return;
        }

        _lodash2.default.set(path, 'node.specifiers', _lodash2.default.without.apply(_lodash2.default, [specifiers].concat(_toConsumableArray(specifiersForRemoval))));
      },

      ExportNamedDeclaration: function ExportNamedDeclaration(path, _ref2) {
        var opts = _ref2.opts;

        var declaration = _lodash2.default.get(path, 'node.declaration');

        // Heads up! Exports that have decrations will be handled
        // by the ImportDeclaration visitor
        if (declaration) return;

        var imports = opts.imports;

        var source = _lodash2.default.get(path, 'node.source.value');

        if (_lodash2.default.has(imports, source)) path.remove();
      }
    }
  };
};

// Provide the path to the package's base directory for caching with broccoli
// Ref: https://github.com/babel/broccoli-babel-transpiler#caching
module.exports.baseDir = function () {
  return _path2.default.resolve(__dirname, '..');
};