user  root;
worker_processes  auto; #TODO: Check value for this. (This should be equal to no of cores in server.  CHECK: grep processor /proc/cpuinfo | wc -l )

error_log  /var/log/nginx/error.log;

pid        /var/run/nginx.pid;

events {
    use epoll;
    worker_connections  1024; #TODO: Check value for this. (Simultaneus user served by nginx server.  CHECK: ulimit -n)
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;

    # Removing nginx version
    server_tokens off;
    proxy_hide_header X-Powered-By;
    proxy_hide_header X-Varnish;
    proxy_hide_header Via;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format custom '$remote_addr $http_true_client_ip - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    access_log /var/log/nginx/access.log custom;
    error_log /var/log/nginx/error.log;

    # Gzip Settings

    gzip on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_http_version 1.1;
    gzip_comp_level 9;
    gzip_vary on;
    gzip_min_length 1400;    #TODO: Check value for this. (If the content to be returned can fit into one single TCP packet, then compressing it is useless. compress if size is bigger than the MTU(1400)
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;
    gzip_buffers 16 8k;    #TODO: Check value for this.

    # Adding open file cache
    open_file_cache max=10000 inactive=30s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    # Set real IP of the client
    real_ip_header X-Forwarded-For;
    proxy_read_timeout 1d;


    server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        # Make site accessible from http://localhost/
        server_name localhost;
        root /var/app/;
        location /api/v1/ {
            proxy_pass        http://afterglow_api;
            proxy_set_header  X-Real-IP $remote_addr;
            proxy_pass_request_headers      on;
        }
        location /render_chart/  {
            proxy_pass        http://chart_renderer_api;
            proxy_set_header  X-Real-IP $remote_addr;
            proxy_pass_request_headers      on;
        }
        location /dashboards/ {
          rewrite ^/(.*)$ /frontend/$1 permanent;
       }
       location / {

           alias /var/app/frontend/;
     				    expires 5m;
     				    try_files $uri  /index.html frontend/index.html;
                                   # rewrite ^/frontend/(.*) $uri redirect;
           proxy_pass_request_headers      on;
     			  }
        location /frontend/ {
            alias /var/app/frontend-v2/;
				    expires 5m;
				    try_files $uri $uri/ /index.html /var/app/frontend-v2/index.html ;
            proxy_pass_request_headers      on;
			  }
        


	}
		upstream afterglow_api {
				server 127.0.0.1:4000;
		}
		upstream chart_renderer_api {
				server 127.0.0.1:3000;
		}


}
